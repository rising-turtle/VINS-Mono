%YAML:1.0

#common parameters
imu_topic: "/snappy_imu"
image_topic: "/snappy_cam/stereo_l"
output_path: "/home/davidz/work/result/fpv_forward"

#camera calibration
model_type: KANNALA_BRANDT
camera_name: camera
image_width: 640
image_height: 480
projection_parameters:
   k2: -6.545154718304953e-06
   k3: -0.010379525898159981
   k4: 0.014935312423953146
   k5: -0.005639061406567785
   mu: 275.46015578667294
   mv: 274.9948095922592
   u0: 315.958384100568
   v0: 242.7123497822731

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.027257, -0.713921,  0.699696, 
          -0.999626,  0.017931, -0.020644, 
          0.002192, -0.699997, -0.714142]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.007515, 0.024045, 0.005773]

#feature traker paprameters
max_cnt: 300 #250            # max feature number in feature tracking
min_dist: 25            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.12 # 0.1 # 0.04          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.02 # 0.05 #0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.002 #0.0004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.00004 #2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80766     # gravity magnitude

#loop closure parameters
loop_closure: 1 #0 #1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.0149507360078                # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 1 #1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
