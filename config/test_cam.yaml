%YAML:1.0

#common parameters 
#
# TODO: change these topics 
imu_topic: "/imu0"
image_topic: "/cam0/image_raw" # "/cam0/color" "/cam0/image_raw"
output_path: "vins_result.csv"         # vins outputs will be wrttento vins_folder_path + output_path

    #camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
    k1: 0. # -0.2847798 # -0.239552  # -0.2847798
    k2: 0. # 0.08245052 # 0.037056  # 0.08245052
    p1: 0. # -1.0946156e-6 # 3.5763956e-6 # -1.0946156e-6
    p2: 0. # 4.78701072e-6 # -1.4032145e-5 # 4.78701072e-6
projection_parameters: 
    fx: 507.1131
    fy: 507.6100
    cx: 321.1179
    cy: 241.3314

    # Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0 #1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
    # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
    # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning. 
ex_calib_result_path: "ex_calib_result.yaml"  # If you choose 1 or 2, the extrinsic calibration result will be written vins_folder_path + ex_calib_result_path.                        
    #If you choose 0 or 1, you should write down the following matrix.
    #Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
    rows: 3
    cols: 3
    dt: d
    data: [0., -0.999997, 0., 
            -1, -0., -0., 
            0., -0., -1]
    #Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
    rows: 3
    cols: 1
    dt: d
    data: [-0., 0., -0.]

    #feature traker paprameters
max_cnt: 150  # 150          # max feature number in feature tracking
min_dist: 30 # 30  # 30          # min distance between two features 
freq: 10 # 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 2.0 # 3.0 # 2.0 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # 1 if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

    #optimization parameters
max_solver_time: 0.4 # 0.04  # 0.04 max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # 8 max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # 10.0 # keyframe selection threshold (pixel)

    #imu parameters       The more accurate parameters you provide, the better performance
    # TODO: figure out these parameters
acc_n: 8.0e-3 # 0.119 #0.1 #0.07           # accelerometer measurement noise standard deviation. #0.001372
gyr_n: 4.0e-4 #1.6968e-04  # 0.0208 #0.01 #0.004          # gyroscope measurement noise standard deviation.
acc_w: 3.0e-3 # 0.00535 #0.00535 #0.001 # 0.00172 # 0.000277          # accelerometer bias random work noise standard deviation. 
gyr_w: 2.0e-5 # 0.00089 #0.0001 # 0.000044 # 0.00003428        # gyroscope bias random work noise standard deviation.     #0.000003428
g_norm: 9.81     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/shaozu/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
